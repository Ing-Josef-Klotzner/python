#!/usr/bin/python
# -*- coding: iso-8859-15 -*-
# Berechnung Pi nach Methode Archimedes optimiert - deutlich weniger Vielecke für höhere Präzision
# Die Differenz des Umfangs des Um Kreis Vielecks zu Pi verhält sich zur Differenz zwischen Pi und dem Umfang des In Kreis Vielecks wie 2 : 1
# Daher kann man ausgehend von einem jeweiligen n in je einem In Kreis n-Eck (Vieleck) und einem Um Kreis n-Eck auf Pi viel genauer schließen
# Referenz Pi = pi=3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989
#....1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
#.............1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0.........1.........2.........3.........4.........5.........6.........7.........8.........9.........0


from decimal import *
# import decimal
count, ecken, last_avr, prec = 0, 6, 0, 101
getcontext().prec=prec
a, b = Decimal('2').fma(Decimal('3').sqrt(),0), Decimal('3')  # fma (function multiply and add decimal)
print a
a=Decimal('2')*Decimal('3').sqrt()
print a
pi=Decimal('3.1415926535897932384626433832795')
print (a.fma(b,0))
print ("a*b "+str(a*b))
#print DefaultContext.multiply(a,b)
avr = (a+b)/2
print ("avr "+str(avr))
print ("pi "+str(pi))
print ("pi*pi "+str(pi**2))
while (avr != last_avr):
 print ("{:>30} Ecken  ".format(ecken)+"Pi aus gewichtetem Mittelwert a,b: "+str(avr))
 last_avr, last_a, last_b = avr, a, b
 count += 1
 a=Decimal('2')*a*b/(a+b)
 b=Decimal(a*b).sqrt()
 avr=b+(a-b)/Decimal('3')  # (a-pi)/(pi-b)=2 -> daher gewichteter Mittelwert!
 ecken*=2 	# ecken = 3 * 2 hoch (count+1)
print ("Durchläufe: {:>3} (6 Ecken ist Ausgangswert)".format(count-1))
print ("Dies entspricht Angleichung an Vieleck mit Ecken: {}".format(ecken/2)+" = 3 * 2^{}".format(count-1))
print ("optimiertes Archimedes Pi: "+str(avr))
print ("Reference  Pi:             3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679");
print (" Um Kreis n-Eck a:         "+str(last_a))
print (" In Kreis n-eck b:         "+str(last_b))
print ("Nach urspruenglicher Archimedes Methode ist Pi nur auf halb so viele Nachkommastellen bestimmt, wie dieses optimierte Pi,");
print ("da Archimedes nur mit Bestimmtheit wusste, dass 'Umfang des Umkreis n-Ecks (a)' > Pi > 'Umfang des Inkreis n-Eck (b)'");
print ("Durch Optimierung mittels gewichtetem Mittelwert des Delta zwischen Umkreis und Inkreis je zu Pi ");
print ("werden also gegenüber ursprünglicher Archimedes Methode doppelt so viele Nachkommastellen bestimmt");
print ("(a-pi)/(pi-b)=2/1 -> daher gewichteter Mittelwert!");

